plugins {
    id 'org.springframework.boot' version '2.7.17'
    id 'io.spring.dependency-management' version '1.1.0'
    id "io.spring.javaformat" version "0.0.35"
    id 'java'
}

group = 'com.tlcsdm'
version = '3.3'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    archiveFileName = 'genCode.jar'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'com.alibaba:druid-spring-boot-starter:1.2.20'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation('org.springframework.boot:spring-boot-starter-web', {
        exclude module: 'spring-boot-starter-tomcat'
    })
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.2'
    implementation 'mysql:mysql-connector-java:5.1.49'
    implementation 'com.tlcsdm:tlcsdm-common:1.4.5'
    implementation fileTree(dir: 'src/main/resources/lib', includes: ['*jar'])
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

tasks.forEach(t->{
    if(t.getName().matches("checkFormat[A-Za-z]*")){
        t.onlyIf {!project.hasProperty('nocheck')}
    }
})